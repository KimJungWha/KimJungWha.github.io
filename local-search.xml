<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>windows系统安装简单总结</title>
    <link href="/2020/12/23/windows%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93/"/>
    <url>/2020/12/23/windows%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/23/rs6YCD.md.png" alt="logo"></p><blockquote><p>我们这学期的活动主要做了一件事，就是装系统，今天我们来做个总结，然后拓展一些知识</p></blockquote><a id="more"></a><h3 id="装系统的流程-PE"><a href="#装系统的流程-PE" class="headerlink" title="装系统的流程(PE)"></a>装系统的流程(PE)</h3><p>安装系统要准备一些东西：系统镜像、PE、和启动介质</p><ul><li>系统镜像就是把系统运行需要的文件打成一个压缩包</li><li>启动介质是把 PE 写在软盘、光盘、U 盘里，电脑插上 U 盘开机，然后进入装系统的流程</li></ul><p>准备好要用的东西，就进入 PE</p><ul><li>电脑要启动 U 盘上的 PE，就要在 Bios<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Bios 是主板上的一块芯片负责电脑硬件加电后启动系统，这个芯片有一个控制菜单，里面可以管理一些功能，配置保存在 CMS 芯片上">[1]</span></a></sup> 上设置启动的顺序<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="启动顺序也叫引导顺序，电脑可以从硬盘、U 盘、光盘启动，PE 相当于是 U 盘上安装的系统，我们需要从 U 盘启动">[2]</span></a></sup></li><li>关闭快速启动<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="快速启动是 windows 加快开机方式的技术，它把运行的内核驱动等进程写到硬盘文件里，下一次启动直接加载，速度明显变快，意味着关机并不是真的关机，下次开机加载的是 PE，属于另一个系统，找不到 Windows 需要运行的进程，会报错">[3]</span></a></sup>和安全启动<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="安全启动是 UEFI 引导模式的特性，启动时验证系统 EFI 引导文件的签名，没有签名的一律不加载，因为 PE 属于第三方修改，没有签名，所以开启安全启动无法加载">[4]</span></a></sup></li></ul><p>进入 PE 以后安装系统</p><ul><li><p>分区：新买的硬盘是没有分区的，没有分区系统不认识<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="分区的实质是建立文件系统，不同系统使用的文件系统不同：Linux 使用 EXT4、Windows 使用 NTFS、MacOS 使用 APFS，所以不分区系统是不会使用的">[5]</span></a></sup>，无法使用。分区是把一个硬盘分成几个块，我们一般推荐的是三分区<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="并不是分区越多越好，有种说法是固态硬盘只分一个 C 盘，因为 NTFS 文件系统的特性，分区越多磁盘碎片越多。但是这样容易造成文件的混乱，所以我们推荐三分区的格式：C 盘放系统及驱动、D 盘放软件游戏、E 盘放媒体及文档文件">[6]</span></a></sup></p></li><li><p>用镜像安装系统：点开安装工具，选择镜像，选择 C 盘，点击安装</p></li></ul><p>安装完成重启进入系统</p><ul><li>官方 ISO 镜像自带系统安装工具，只要像加载 PE 一样加载镜像，根据提示安装即可，要注意的是，官方镜像会自动创建一个 Recovery (恢复)分区，里面存放一些恢复工具</li></ul><h3 id="PE-Windows-Preinstallation-Environment"><a href="#PE-Windows-Preinstallation-Environment" class="headerlink" title="PE (Windows Preinstallation Environment)"></a>PE (Windows Preinstallation Environment)</h3><p>PE 的全称叫「预安装环境」，实际上是一个极简版本的 Windows 系统，是用来维护系统的，<a href="https://docs.microsoft.com/zh-cn/windows-hardware/manufacture/desktop/winpe-intro">官方的 PE</a> 很简陋，只有命令行，因此广大的第三方开发者基于官方的 PE 定制修改自己的 PE,放到网上供人使用，比较出名的有大白菜、老毛桃、微PE……</p><ul><li><p>要知道不是所有的开发者都愿意免费分享自己的劳动成果，因此业界比较流行的做法是，在你安装系统时，给你添加一些含有推广的软件，从中赚取利益</p></li><li><p>也有 PE 不含推广，比如微 PE，但是因为开发者开发完全是兴趣，更新慢，并且工具陈旧、功能少</p></li><li><p>我们更推荐 <a href="https://www.itsk.com/">IT 天空</a> 的 U 启通，因为以下几个原因：</p><ol><li>U 启通集成了很多好用的工具，涵盖了硬件检测、跑分测试、系统安装、修改定制、数据恢复、密码破解等等刚需功能</li><li>U 启通留下了定制的空间，允许进行简单的修改和外挂自己的程序</li><li>并且 U 启通集成了网卡驱动，意味着你可以上网来查询问题的解决办法，大部分 PE 是不能上网的</li></ol></li><li><p>微软把 PE 定义成了维护工具，有人因为 PE 的简洁流畅，想把 PE 作为主力系统，微软为防止这一行为，设计上强制规定，PE 48 小时数据重置一次，因此，要重申一点，PE 只是个临时系统，不会保存数据，启动完了就加载在内存里，内存大家都知道，里面的数据断电就丢失了</p></li></ul><h3 id="系统镜像"><a href="#系统镜像" class="headerlink" title="系统镜像"></a>系统镜像</h3><p>系统镜像的实质是高压缩文件，有 ISO、GHO、ESD、WIM 四种格式，每种格式有自己的特点</p><p>可以引导的 ISO 格式</p><ul><li>ISO 镜像是一种通用的格式，不单单是用来做系统镜像的，比如英语书上的附赠的光盘，也是这种格式</li><li>ISO 格式特殊在两点，一个是可以引导，另外一个是压缩软件可以打开</li><li>因为它可以引导，所以微软用这种格式来做 windows 系统的安装镜像</li><li>因为它实际上就是一个压缩包，所以压缩软件是可以打开的，但是要注意，解压缩出来的文件就没有引导信息了</li></ul><p>早已淘汰的 GHO 格式</p><ul><li>GHO 是一种很老的备份技术，是以前赛门特克的备份工具 Ghost 的备份文件</li><li>这种技术只能一个镜像保存一个分区，而 UEFI 引导的标志是把系统和引导独立成两个分区，于是就淘汰了</li><li>但是还时常有人拿来忽悠人</li></ul><p>微软自己的格式，WIM 和 ESD</p><ul><li>ESD 是微软系统升级用的格式，假如你现在的电脑是 win7，下载了 windows 易升，升级到 Win10,你会发现下载的镜像就是这种格式</li><li>WIM 是 Windows 系统内核的格式，PE 其实就是这种格式</li></ul><p>微软推出 ESD 和 WIM 主要是因为压缩率很高，做出来的镜像体积小，所以有些系统封装大佬，也喜欢用这两种格式<br>GHO 还在使用主要是历史遗留问题，ISO 是通用的格式</p><h3 id="引导方式"><a href="#引导方式" class="headerlink" title="引导方式"></a>引导方式</h3><p>系统文件能启动是因为有引导文件，主流的引导方式有两种，Legacy Bios 和 UEFI</p><ul><li><p>Legacy Bios 是早期的引导方式，采用 MBR 分区，引导文件和系统在一个分区里，MBR 里分区分为主分区和逻辑分区。规定一块硬盘最多四个主分区，而主分区才能被引导，也就是说一块硬盘最多四个系统，并且最大支持 2T 的硬盘</p></li><li><p>UEFI 是主流的引导方式，采用 GPT 分区，硬盘单独分一个默认 300M 的 EFI 分区，用于存放硬盘上所有系统的引导文件。在 GPT 里所有的分区都是主分区，因此分区基本无限，并且 UEFI 引导要比 Legacy Bios 加载速度快</p></li></ul><h3 id="拓展知识"><a href="#拓展知识" class="headerlink" title="拓展知识"></a>拓展知识</h3><p>假设你是一个网管，你需要给学校的机房电脑重装系统，安装常用的软件，然后做日常的维护</p><h4 id="无人值守"><a href="#无人值守" class="headerlink" title="无人值守"></a>无人值守</h4><p>一个机房 50 台电脑，如果拿 U 盘一个个的装，那显然是不可能的，因此引入了一种叫无人值守的概念</p><ul><li><p>所谓的无人值守，是指写一个 xml 格式的自动应答文件。win 安装有选项，这个文件里面写的就是选项的答案，系统安装的时候自动读取这个文件，然后不用人操作，根据你的答案自动安装，这是一台主机的无人值守</p></li><li><p>要给这么多主机安装系统，就要把这些主机设成网卡启动，然后通过服务器批量把镜像和文件推送给机房的所有电脑，机房电脑收到后自动安装系统</p></li></ul><h4 id="系统封装"><a href="#系统封装" class="headerlink" title="系统封装"></a>系统封装</h4><p>系统批量安装完了，但是软件还得一个个手动装，这也很麻烦，有没有一劳永逸的办法呢？这个办法就是系统封装</p><ul><li><p>所谓的系统封装，是指先在一台虚拟机<sup id="fnref:7" class="footnote-ref"><a href="#fn:7" rel="footnote"><span class="hint--top hint--rounded" aria-label="为什么必须要在虚拟机里安装？真机也能封装，但是假设你的电脑是 intel 网卡，安装好的系统使用的就是 intel 的网卡驱动，把这个系统封装成镜像后，到了另一台瑞昱网卡的电脑上，因为是驱动不符合，所以无法上网，虚拟机的驱动是虚拟的，相当于公用驱动">[7]</span></a></sup>里安装一个 windows，然后安装常用的软件，做修改，最后用工具封装成镜像</p></li><li><p>这样再批量的无人值守，安装完的系统都是配置好的，不用再一个个配</p></li><li><p>同理，网上下载的一些镜像也是使用这种方法添加了很多推广软件，赚取利润，如 <a href="https://jifen.2345.com/">2345装机联盟</a></p></li></ul><h4 id="软硬件还原和无盘系统"><a href="#软硬件还原和无盘系统" class="headerlink" title="软硬件还原和无盘系统"></a>软硬件还原和无盘系统</h4><p>总之，系统都安装好了，但是机房是公共区域，如何保证每台电脑系统不会崩掉，导致学生没法上课呢</p><p>硬件还原</p><ul><li><p>买一张 PCI 插槽的还原卡，插在电脑上就可以了</p></li><li><p>因为 PCI 插槽设备比电脑系统先启动，还原卡启动先劫持系统，然后找一块临时空间，和要保护的地方互换，比如说电脑 C 盘是系统盘很重要，F 盘是空的，那就把 F 盘和 C 盘映射一下，用户开机在 C 盘下载了一个文件，文件实际上是放 F 盘了，然后 F 盘是临时空间，断电数据丢失</p></li><li><p>硬件还原首先要买一个还原卡，其次还原卡的工作原理是找临时空间，假设你电脑硬盘满了，还原卡找不到足够的空间，那可能一辈子都开不了机，并且空间越小，电脑性能越低</p></li><li><p>因为硬件还原的诸多弊端，已经基本淘汰，发展出了软件还原</p></li></ul><p>软件还原</p><ul><li><p>以冰点这个还原软件为例，它在系统启动的时候把自己作为硬盘驱动加载到了系统的内核里，系统要对硬盘修改，就要经过它的过滤，它有一个小本本，上面记着你是怎么改的，然后把改掉的文件，放在一个临时目录里去，然后还是断电丢失</p></li><li><p>假设你下载了一个文件，然后它会记下这块地方原来是空的，放了个文件，这个文件实际上是放在了一个临时目录里，然后在你下载的地方做个链接，你使用是正常使用的</p></li><li><p>无论怎么还原，系统性能是绝对下降的，于是诞生了无盘系统</p></li></ul><p>无盘系统</p><ul><li>无盘系统是指，机房里的每一台电脑都不装硬盘，然后假设一台服务器，服务器里硬盘放着系统镜像和常用的软件</li><li>每次机房电脑开机，服务器把系统镜像、软件传输给电脑</li><li>机房电脑可以读到服务器硬盘的文件，拿到自己内存中运行，但是不能改硬盘上的内容</li><li>网吧目前就是采用这种方法，每次游戏更新什么的，只要更新服务器上的就可以了</li><li>假如你在这种电脑上下了个文件，然后这个文件实际上是保存在了内存里，内存断电数据丢失</li></ul><h3 id="脚注解释"><a href="#脚注解释" class="headerlink" title="脚注解释"></a>脚注解释</h3><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>Bios 是主板上的一块芯片负责电脑硬件加电后启动系统，这个芯片有一个控制菜单，里面可以管理一些功能，配置保存在 CMS 芯片上<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>启动顺序也叫引导顺序，电脑可以从硬盘、U 盘、光盘启动，PE 相当于是 U 盘上安装的系统，我们需要从 U 盘启动<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>快速启动是 windows 加快开机方式的技术，它把运行的内核驱动等进程写到硬盘文件里，下一次启动直接加载，速度明显变快，意味着关机并不是真的关机，下次开机加载的是 PE，属于另一个系统，找不到 Windows 需要运行的进程，会报错<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span>安全启动是 UEFI 引导模式的特性，启动时验证系统 EFI 引导文件的签名，没有签名的一律不加载，因为 PE 属于第三方修改，没有签名，所以开启安全启动无法加载<a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span>分区的实质是建立文件系统，不同系统使用的文件系统不同：Linux 使用 EXT4、Windows 使用 NTFS、MacOS 使用 APFS，所以不分区系统是不会使用的<a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span>并不是分区越多越好，有种说法是固态硬盘只分一个 C 盘，因为 NTFS 文件系统的特性，分区越多磁盘碎片越多。但是这样容易造成文件的混乱，所以我们推荐三分区的格式：C 盘放系统及驱动、D 盘放软件游戏、E 盘放媒体及文档文件<a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span>为什么必须要在虚拟机里安装？真机也能封装，但是假设你的电脑是 intel 网卡，安装好的系统使用的就是 intel 的网卡驱动，把这个系统封装成镜像后，到了另一台瑞昱网卡的电脑上，因为是驱动不符合，所以无法上网，虚拟机的驱动是虚拟的，相当于公用驱动<a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>winser2012下网站搭建</title>
    <link href="/2020/12/19/winser2012%E4%B8%8B%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/"/>
    <url>/2020/12/19/winser2012%E4%B8%8B%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h3 id="添加-IIS-功能"><a href="#添加-IIS-功能" class="headerlink" title="添加 IIS 功能"></a>添加 IIS 功能</h3><ol><li>在服务器管理面板点击添加角色和功能<br><img src="https://s3.ax1x.com/2020/12/19/rtGL7Q.png" alt="添加角色和功能"><br><img src="https://s3.ax1x.com/2020/12/19/rtGXkj.png" alt="跳过此页"></li><li>点击基于角色功能安装<br><img src="https://s3.ax1x.com/2020/12/19/rtGbnS.png" alt="基于角色安装"></li><li>选择本地服务器<br><img src="https://s3.ax1x.com/2020/12/19/rtG7X8.png" alt="选择本地服务器"></li><li>选择 WEB 服务器(IIS)<br><img src="https://s3.ax1x.com/2020/12/19/rtGq0g.png" alt="05_选择IIS功能.PNG"></li><li>点击安装<br><img src="https://s3.ax1x.com/2020/12/19/rtGjts.png" alt="06_点击安装.PNG"></li><li>安装完成后关闭此页<br><img src="https://s3.ax1x.com/2020/12/19/rtGzpq.png" alt="07_安装成功.PNG"></li></ol><h3 id="IIS下配置网站"><a href="#IIS下配置网站" class="headerlink" title="IIS下配置网站"></a>IIS下配置网站</h3><ol><li>开始菜单打开管理工具<br><img src="https://s3.ax1x.com/2020/12/19/rtGvhn.png" alt="08_管理工具.PNG"></li><li>选择 IIS 管理器<br><img src="https://s3.ax1x.com/2020/12/19/rtJS10.png" alt="09_IIS管理器.PNG"></li><li>进入管理器页面，右侧栏启动是灰色的，证明网站此时是启动的<br><img src="https://s3.ax1x.com/2020/12/19/rtJpcV.png" alt="10_此时网站启动.PNG"></li><li>开始菜单，打开 IE 浏览器，输入 127.0.0.1 查看<ul><li>127.0.0.1 代表本机，访问的是 IIS 的默认网站，每个中间件都有自己的默认网页，标识自己是哪个程序<br><img src="https://s3.ax1x.com/2020/12/19/rtJ9XT.png" alt="11_访问测试.PNG"></li></ul></li></ol><h3 id="新建网站"><a href="#新建网站" class="headerlink" title="新建网站"></a>新建网站</h3><ol><li>用资源管理器在 C 盘根目录新建 WEB 文件夹，在资源管理器，查看一栏打开文件后缀名<br><img src="https://s3.ax1x.com/2020/12/19/rtJPnU.png" alt="12_新建web文件夹并且开启后缀名.PNG"></li><li>在 web 文件夹右键新建文本文档，改名为 index.html<ul><li>html 是静态网页的格式，index 英文原意索引，在网站中是网站首页的名字<br><img src="https://s3.ax1x.com/2020/12/19/rtJiBF.png" alt="13_新建网页并保存.PNG"></li></ul></li><li>在网站页右侧栏，点击停止，关闭原来的默认网站<br><img src="https://s3.ax1x.com/2020/12/19/rtJF74.png" alt="14_停止默认网站.PNG"></li><li>左侧栏网站那里，右键新建网站，网站名称随意，物理路径填 C:\web 代表 C 盘下的 web 文件夹<br><img src="https://s3.ax1x.com/2020/12/19/rtJAAJ.png" alt="15_新建网站.PNG"></li><li>开始菜单重启服务器，或者也可以命令行重启<ul><li>因为默认网站占用了 80 端口，而新网站也选择了 80 端口，所以需要重启，结束占用，如果选择了其他端口不需要重启，即时生效，但是访问时，需要手动加上端口号<br><img src="https://s3.ax1x.com/2020/12/19/rtJEN9.png" alt="16_手动重启.PNG"></li></ul></li><li>重启后，网站自动开始运行，IE 浏览器访问 127.0.0.1 访问，可以看到网页<br><img src="https://s3.ax1x.com/2020/12/19/rtJe91.png" alt="17_IE访问测试.PNG"></li><li>键盘 windows 键(徽标键) + R 打开运行，输入 cmd 回车，输入 ipconfig 可以看到 winser 的IP 地址</li><li>实体机(真实电脑)浏览器访问 winser (虚拟机)的IP 地址可以看到如图<br><img src="https://s3.ax1x.com/2020/12/19/rtJVhR.png" alt="18_实体机访问测试.PNG"></li></ol>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>winser2012系统安装</title>
    <link href="/2020/12/19/winser2012%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"/>
    <url>/2020/12/19/winser2012%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ol><li>VMware Workstation(图右)</li><li>Winser 2012 ISO 镜像(图左)<br><img src="https://i.loli.net/2020/12/19/yWg7G5NQsxqSnDb.png" alt="01_准备镜像.PNG"></li></ol><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>新建虚拟机</p><ol><li>点击新建虚拟机<br><img src="https://i.loli.net/2020/12/19/PcpLyiZ3Xqz8xE6.png" alt="02_新建虚拟机.PNG"></li><li>典型与自定义任意，这里选择典型<br><img src="https://i.loli.net/2020/12/19/BXk8A2rtd3qFUCm.png" alt="03_选择镜像.PNG"></li><li>挂载镜像<br><img src="https://i.loli.net/2020/12/19/Duej86zQlhMc4Ar.png" alt="04_选择虚拟机名字.PNG"></li><li>设置虚拟机名字与位置，默认，自己选位置都可以<br><img src="https://i.loli.net/2020/12/19/UoIy86D5tnQ4dxw.png" alt="05_虚拟机磁盘配置.PNG"></li><li>磁盘大小分配，这个看实际用途，我们实验，默认即可<br><img src="https://i.loli.net/2020/12/19/z3RdGXgyYDSsAcH.png" alt="06_给配置.PNG"></li><li>其他配置，可以选择自定义硬件来增加/删除硬件，也可以保持默认，点击完成</li></ol><p>安装 winser 2012</p><ol><li>创建好虚拟机后自动打开，进入安装程序，选择下一步即可<br><img src="https://i.loli.net/2020/12/19/J3o8ey4qizZFfLs.png" alt="07_进入安装程序.PNG"></li><li>点击现在安装，进入安装程序<br><img src="https://i.loli.net/2020/12/19/FwVXvQd5jBzOLTe.png" alt="08_开始安装.PNG"></li><li>版本选择带 GUI(图形化界面)的 datacenter(数据中心版本，功能更多)<br><img src="https://i.loli.net/2020/12/19/QMTWpmtvDzNbyuf.png" alt="09_选择版本.PNG"></li><li>同意协议，点击下一步<br><img src="https://i.loli.net/2020/12/19/dIg3uZR9TPakUvA.png" alt="11_同意协议.PNG"></li><li>选择自定义：<ul><li>升级：在磁盘上已经存在 windows 系统，可以选择升级，比如 winser2008 升级到 2012</li><li>自定义：开始自定义分区，这里通过选择分区大小，可以分出自己想要的分区，<br><img src="https://ae01.alicdn.com/kf/U767fcec279704d96909524667f5b12edX.jpg" alt="12_自定义安装.PNG"></li></ul></li><li>我们做实验，一个 C 盘分区即可，直接点击下一步<br><img src="https://ae01.alicdn.com/kf/U39f25ee617c243df846d5d61519dc668h.jpg" alt="13_划分分区.PNG"></li><li>开始安装，等待即可，安装完成，自动进入系统<br><img src="https://ae01.alicdn.com/kf/U0a029f35e7da41ee9fec3f47694c04efD.jpg" alt="14_开始安装.PNG"></li></ol><p>密码设置</p><ol><li>winser 默认启用 admin 账户，密码复杂度有要求，我们建议 admin@123 这个密码，点击完成<br><img src="images/15_%E8%AE%BE%E7%BD%AE%E5%AF%86%E7%A0%81.PNG" alt="15_设置密码.PNG"></li><li>winser 默认按组合键登陆，因为此组合键与 windows 实体机组合键冲突，VMware 软件把 Delete 改成了 Insert，此处按 Ctrl+Alt+Insert 组合键进入登陆界面<br><img src="https://ae01.alicdn.com/kf/Ud10cfe548903489da1aa72d184a6af85a.jpg" alt="16_按组合键登陆.PNG"></li><li>登陆界面输入密码<br><img src="https://ae01.alicdn.com/kf/U6f5d181cabfe40d095510a29946d484bq.jpg" alt="17_输入密码登陆.PNG"></li></ol><p>VMtools 工具的安装</p><ol><li>此次涉及虚拟化原理，不做过多叙述：虚拟机永远比物理主机性能低，VMtools 可以增强虚拟机性能，拥有两个功能：虚拟机和本机剪贴板同步、可以拖拽文件<br><img src="https://ae01.alicdn.com/kf/U838f2cc278d844a3b00abd4fadba9a72n.jpg" alt="18_安装vmtools.PNG"></li><li>VMware 软件虚拟机选项 =&gt; 安装 VMtools =&gt; 打开资源管理器可以看到如图，双击运行安装程序<br><img src="https://ae01.alicdn.com/kf/U60d120daf9974f3590f552c577787359P.jpg" alt="19_开始安装.PNG"></li><li>点击下一步</li><li>典型安装即可，点击下一步<br><img src="https://ae01.alicdn.com/kf/Uacfb5304436e4247aec8dfe65ef72ffcq.jpg" alt="20_典型安装.PNG"></li><li>点击安装<br><img src="https://ae01.alicdn.com/kf/U03b9cd494b9a465095ba2f604db329ec8.jpg" alt="21_开始安装.PNG"></li><li>安装结束后，点击完成，提示重启才能应用特性，选择是，等待重启<br><img src="https://img.zsykjm.com/2020/12/19/22_.md.png" alt="22_完成安装.PNG"><br><img src="https://img.zsykjm.com/2020/12/19/23_.md.png" alt="23_重启应用.PNG"></li></ol>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>什么？你的服务器还在吃灰？</title>
    <link href="/2020/11/27/%E4%BB%80%E4%B9%88-%E4%BD%A0%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%98%E5%9C%A8%E5%90%83%E7%81%B0/"/>
    <url>/2020/11/27/%E4%BB%80%E4%B9%88-%E4%BD%A0%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%98%E5%9C%A8%E5%90%83%E7%81%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>现在是虚拟化、云计算的时代，Docker 是虚拟化的重要技术。Docker 不仅十分好用，而且简单易上手，这里介绍两个有趣的 Docker 镜像。为了方便，我这里开个 Centos 虚拟机来假装服务器</p></blockquote><a id="more"></a><h3 id="说点常识"><a href="#说点常识" class="headerlink" title="说点常识"></a>说点常识</h3><p>Docker 是一种容器技术，所谓容器我们可以近似的看成虚拟机，不过虚拟机是在真实系统上模拟一个虚拟硬件，再在虚拟硬件上跑操作系统，而容器是在系统上跑另一个系统，比起虚拟机性能更高、占用更小<br>我们写一个像 shell 脚本的 dockerfile,里面定义了要做的操作，然后生成一个只读的镜像，docker 以这个镜像为蓝本，在镜像的基础上运行一个容器，容器可读可写，不需要就可以删除，只要保留了镜像，可以随时随地批量跑多个一模一样的容器(系统)小</p><h3 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h3><ol><li>安装 Xshell<br> 从压缩包解压出文件夹，点击运行「绿化.bat」绿化后桌面会出现软件的图标,打开 Xshell<br> <img src="https://s3.ax1x.com/2020/11/27/DsAgC4.png" alt="安装xhell"></li><li>安装报错<br> 如果安装报错，说明你的系统缺少一些必备组件，点击安装文件夹中的常用运行库<br> <img src="https://s3.ax1x.com/2020/11/27/DsAWvR.png" alt="安装报错"><br> <img src="https://s3.ax1x.com/2020/11/27/DsEhWQ.png" alt="安装运行库"><br> 安装完运行库后重新打开 xshell，软件会询问你数据的保存位置，默认即可<br> <img src="https://s3.ax1x.com/2020/11/27/DsAbPe.png" alt="数据保存位置"></li><li>连接服务器<br> 点击「连接」，填入服务器 IP 地址，点击确定<br> <img src="https://s3.ax1x.com/2020/11/27/DsAq8H.png" alt="连接服务器"><br> 软件会询问是否保存密钥，选择「接受并保存」<br> <img src="https://s3.ax1x.com/2020/11/27/DsA75D.png" alt="保存密钥"><br> 然后依次输入服务器的用户名、密码，登陆到服务器<br> <img src="https://s3.ax1x.com/2020/11/27/DsATUO.png" alt="输入用户"><br> <img src="https://s3.ax1x.com/2020/11/27/DsAoVK.png" alt="输入密码"><br> 如图所示，登陆成功<br> <img src="https://s3.ax1x.com/2020/11/27/DsAL2d.png" alt="登陆成功"></li></ol><h3 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h3><ol><li><p>安装 Docker 环境</p><pre><code> curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</code></pre><p> <img src="https://s3.ax1x.com/2020/11/27/DsAOxA.png" alt="安装docker"></p></li><li><p>配置镜像加速</p><pre><code> sudo mkdir -p /etc/docker sudo tee /etc/docker/daemon.json &lt;&lt;-&#39;EOF&#39; &#123; &quot;registry-mirrors&quot;: [&quot;https://reg-mirror.qiniu.com&quot;] &#125; EOF sudo systemctl daemon-reload   # 重载配置 sudo systemctl restart docker  # 重启 docker sudo systemctl enable docker   # 将 docker 设为开机自启</code></pre><p> <img src="https://s3.ax1x.com/2020/11/27/DsAjKI.png" alt="配置镜像加速"></p></li></ol><h3 id="Code-Server"><a href="#Code-Server" class="headerlink" title="Code Server"></a>Code Server</h3><blockquote><p><a href="https://github.com/cdr/code-server">Code Server</a> 是一个在服务器上跑 vscode 的项目，搭建了 code-server 后，不论是手机还是电脑，只要通过浏览器即可享受 vscode 的众多插件加持，畅快写代码</p></blockquote><ol><li><p>拉取镜像</p><pre><code> docker pull linuxserver/code-server</code></pre><p> <img src="https://s3.ax1x.com/2020/11/27/DsAvrt.png" alt="拉取镜像"></p></li><li><p>运行镜像</p><pre><code> docker run -d \     --name=code \  # 设置容器的名字     -e PASSWORD=password \  # 访问密码设置为 password，此参数不写代表无密码     -e SUDO_PASSWORD=password \  # sudo 权限的密码设置为 password     -p 8443:8443 \ # 把服务器的端口映射到容器的端口     linuxserver/code-server</code></pre><p> <img src="https://s3.ax1x.com/2020/11/27/DsESVf.png" alt="运行容器"></p></li><li><p>Enjoy<br> 浏览器访问「IP:8443」打开登陆网页，输入密码即可获得一个与本机完全无差别的 vscode<br> <img src="https://s3.ax1x.com/2020/11/27/DsEpa8.png" alt="登陆验证"><br> <img src="https://s3.ax1x.com/2020/11/27/DsE9IS.png" alt="写点js"><br> <img src="https://s3.ax1x.com/2020/11/27/DsEPPg.png" alt="写点py"></p></li></ol><h3 id="OPQBot"><a href="#OPQBot" class="headerlink" title="OPQBot"></a>OPQBot</h3><blockquote><p><a href="https://github.com/OPQBOT/OPQ">OPQBot</a> 是一个 QQ 机器人框架，具有众多的插件加持，可以实现各种各样有趣的功能，我将它和常用插件包 <a href="https://github.com/fz6m/opqqq-plugin">opqqq-plugin</a> 打包，只需要准备一个机器人用的 QQ 小号，把它拉到群里，运行容器就可以拥有属于自己的 QQ 机器人</p></blockquote><ol><li><p>拉取镜像</p><pre><code> docker pull kimjungwha/opqbot</code></pre><p> <img src="https://s3.ax1x.com/2020/11/27/DsEiGQ.png" alt="拉取镜像"></p></li><li><p>申请 Token<br> 打开 <a href="https://developer.gitter.im/docs/welcome">gitter.im</a>，点击右上角「Sign in」登陆，建议使用 Github 帐号登陆。登陆成功后即可看到 Token<br> <img src="https://s3.ax1x.com/2020/11/27/DsEF2j.png" alt="申请Token"><br> <img src="https://s3.ax1x.com/2020/11/27/DsEMiF.png" alt="申请Token"><br> <img src="https://s3.ax1x.com/2020/11/27/DsEkxs.png" alt="申请Token"></p></li><li><p>创建容器</p><pre><code> docker run -id --name opqbot -e Token=&quot;xxxxxxx&quot; -e QQ=&quot;xxxxxxx&quot; -p 8888:8888 kimjungwha/opqbot  # Token=&quot;&quot; 填入 Token，QQ=&quot;&quot; 填入 QQ 号</code></pre><p> <img src="https://s3.ax1x.com/2020/11/27/DsEEMn.png" alt="运行容器"></p></li><li><p>登陆 QQ 号<br> 浏览器访问「服务器IP:端口」进入控制台<br> <img src="https://s3.ax1x.com/2020/11/27/DsEVrq.png" alt="访问控制台1"></p><p> 访问「服务器IP:端口/v1/Login/GetQRcode」获取 QQ 登陆的二维码，手机 QQ 切小号扫码登陆<br> <img src="https://s3.ax1x.com/2020/11/27/DsEZq0.png" alt="扫码登陆"><br> <img src="https://s3.ax1x.com/2020/11/27/DsEmZV.png" alt="登陆成功"></p></li><li><p>Enjoy<br> 具体的插件使用方法可以看<a href="https://fz6m.github.io/opqqq-plugin-press/">opqqq-plugin 官网</a><br> <img src="https://s3.ax1x.com/2020/11/27/DsZkBq.png" alt="Enjoy1"><br> <img src="https://s3.ax1x.com/2020/11/27/DsEuIU.png" alt="Enjoy2"><br> <img src="https://s3.ax1x.com/2020/11/27/DsZFun.png" alt="Enjoy3"></p></li><li><p>添加插件<br> 为了防止体积过大，我只集成了五个插件，如果你还想拥有更多的功能，可以自行添加插件，如 <a href="https://github.com/yuban10703/OPQ-SetuBot">SEtu机器人</a>    </p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>白嫖Bilibili挂机脚本</title>
    <link href="/2020/11/23/%E7%99%BD%E5%AB%96Bilibili%E6%8C%82%E6%9C%BA%E8%84%9A%E6%9C%AC/"/>
    <url>/2020/11/23/%E7%99%BD%E5%AB%96Bilibili%E6%8C%82%E6%9C%BA%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h2 id="BILIBILI-HELPER"><a href="#BILIBILI-HELPER" class="headerlink" title="BILIBILI-HELPER"></a>BILIBILI-HELPER</h2><blockquote><p>利用 GitHub Action 自动完成 Bilibili 每日任务，以白嫖的方式快速成为六级号</p></blockquote><a id="more"></a><h3 id="Github-fork-此项目"><a href="#Github-fork-此项目" class="headerlink" title="Github fork 此项目"></a>Github fork 此项目</h3><p>打开<a href="https://github.com/lycthp/BILIB">项目主页</a>，点击右上角的「Fork」，Github 会把这个仓库复制到你的账户下</p><p><img src="https://s3.ax1x.com/2020/11/23/DYh8uq.png" alt="fork项目"></p><h3 id="创建-Secrets"><a href="#创建-Secrets" class="headerlink" title="创建 Secrets"></a>创建 Secrets</h3><ol><li><p>浏览器打开并登录 bilibili，提取 Cookies</p><ul><li><p>按 F12 打开 「开发者工具」 找到「应用程序/Application」=&gt;「存储」=&gt;「Cookies」  </p></li><li><p>找到「<code>bili_jct</code>」、「<code>SESSDATA</code>」 「<code>DedeUserID</code>」三项，并复制对应的值<br>  <img src="https://s3.ax1x.com/2020/11/23/DYhOPg.png" alt="获取cookie"></p><p>  <img src="https://s3.ax1x.com/2020/11/23/DYh4xA.png" alt="获取cookie2">  </p></li></ul></li></ol><ol start="2"><li><p>创建对应的 GitHub Secrets  </p><ul><li><p>回到自己 fork 的项目，点击「Settings」=&gt; 「Secrets」 =&gt; 「New Secrets」添加以下 3 个 Secrets,填入对应的值</p><table><thead><tr><th align="center">变量</th><th align="center">值</th></tr></thead><tbody><tr><td align="center"><code>DEDEUSERID</code></td><td align="center">从 Cookie 中获取</td></tr><tr><td align="center"><code>SESSDATA</code></td><td align="center">从 Cookie 中获取</td></tr><tr><td align="center"><code>BILI_JCT</code></td><td align="center">从 Cookie 中获取</td></tr></tbody></table><p><img src="https://s3.ax1x.com/2020/11/23/DYhJbV.png" alt="填入cookie"></p></li></ul></li></ol><h3 id="手动执行"><a href="#手动执行" class="headerlink" title="手动执行"></a>手动执行</h3><ol><li><p>手动执行验证是否成功<br> 点击「Actions」，开启「workflows」<br> <img src="https://s3.ax1x.com/2020/11/23/DYhtET.png" alt="开启action"><br> 点击「run workflow」，手动运行脚本<br> <img src="https://s3.ax1x.com/2020/11/23/DYhU5F.png" alt="开启action2"></p></li><li><p>验证成功<br> <img src="https://s3.ax1x.com/2020/11/23/DYhw8J.png" alt="查看结果"><br> <img src="https://s3.ax1x.com/2020/11/23/DYh029.png" alt="查看结果"></p></li></ol><h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><ul><li>修改「./github/trigger.json」文件,将 <code>trigger</code> 的值改为 1，以开启 Actions 每日自动执行脚本<br>  <img src="https://s3.ax1x.com/2020/11/23/DYh1vn.png" alt="修改配置1"><br>  <img src="https://s3.ax1x.com/2020/11/23/DYhMCQ.png" alt="修改配置2"><br>  <img src="https://s3.ax1x.com/2020/11/23/DYhGD0.png" alt="修改配置3"></li></ul><h3 id="接入-Server-酱推送通知"><a href="#接入-Server-酱推送通知" class="headerlink" title="接入 Server 酱推送通知"></a>接入 Server 酱推送通知</h3><ol><li><p>打开 <a href="http://sc.ftqq.com/">Server酱</a> 点击「登入」  </p><p> <img src="https://s3.ax1x.com/2020/11/23/DYhlgs.png" alt="server1"></p></li><li><p>点击点发送消息，生成调用代码，点击微信推送，绑定微信账号  </p><p> <img src="https://s3.ax1x.com/2020/11/23/DYhQ3j.png" alt="server2"></p></li></ol><ol start="3"><li><p>在 Github Secrets 新建 <code>SERVERPUSHKEY</code> 变量，填入调用代码,至此，secrets 共有四个变量</p><p> <img src="https://s3.ax1x.com/2020/11/23/DYhNUU.png" alt="填入cookie2"></p></li><li><p>手机效果</p><p> <img src="https://s3.ax1x.com/2020/11/23/DYhgUO.jpg" alt="手机效果"></p></li></ol><h3 id="开启脚本自动更新"><a href="#开启脚本自动更新" class="headerlink" title="开启脚本自动更新"></a>开启脚本自动更新</h3><ol><li><p>在 <code>./github/workflows</code> 目录下创建 <code>auto_merge.yml</code> 文件，内容如下</p><p> <img src="https://s3.ax1x.com/2020/11/23/DYhBvR.png" alt="自动更新"></p></li></ol><pre><code>    name: auto_merge    on:    workflow_dispatch:    schedule:        - cron: 0 8 * * fri        # cron表达式,每周五16点执行一次，actions任务时区为UTC时区。     jobs:    merge:        runs-on: ubuntu-latest        steps:        - name: Checkout        uses: actions/checkout@v2        with:            ref: main            fetch-depth: 0            lfs: true        - name: Set git identity        run : |            git config --global user.email &quot;41898282+github-actions[bot]@users.noreply.github.com&quot;            git config --global user.name &quot;github-actions[bot]&quot;        - name: Load upstream commits        run: |            git update-index --assume-unchanged ./src/main/resources/config.json            git pull https://github.com/JunzhouLiu/BILIBILI-HELPER.git --log --no-commit        - name: Apply commit changes        run: |            if [ -f ./.git/MERGE_MSG ]; then            mkdir ./tmp &amp;&amp; cp ./.git/MERGE_MSG ./tmp/message            sed -i &quot;1c [bot] AutoMerging: merge all upstream&#39;s changes:&quot; ./tmp/message            sed -i &#39;/^\#.*/d&#39; ./tmp/message            git commit --file=&quot;./tmp/message&quot;            else            echo &quot;There is no merge commits.&quot;            fi        - name: Push Commits        env:            DOWNSTREAM_BRANCH: main            TZ: Asia/Shanghai        run: git push origin $DOWNSTREAM_BRANCH</code></pre><ol start="2"><li>点击提交即可<br><img src="https://s3.ax1x.com/2020/11/23/DYhcVK.png" alt="自动更新2"></li></ol>]]></content>
    
    
    <categories>
      
      <category>Script</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Script</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
