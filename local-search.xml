<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>什么？你的服务器还在吃灰？</title>
    <link href="/2020/11/27/%E4%BB%80%E4%B9%88-%E4%BD%A0%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%98%E5%9C%A8%E5%90%83%E7%81%B0/"/>
    <url>/2020/11/27/%E4%BB%80%E4%B9%88-%E4%BD%A0%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%98%E5%9C%A8%E5%90%83%E7%81%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>现在是虚拟化、云计算的时代，Docker 是虚拟化的重要技术。Docker 不仅十分好用，而且简单易上手，这里介绍两个有趣的 Docker 镜像。为了方便，我这里开个 Centos 虚拟机来假装服务器</p></blockquote><a id="more"></a><h3 id="说点常识"><a href="#说点常识" class="headerlink" title="说点常识"></a>说点常识</h3><p>Docker 是一种容器技术，所谓容器我们可以近似的看成虚拟机，不过虚拟机是在真实系统上模拟一个虚拟硬件，再在虚拟硬件上跑操作系统，而容器是在系统上跑另一个系统，比起虚拟机性能更高、占用更小<br>我们写一个像 shell 脚本的 dockerfile,里面定义了要做的操作，然后生成一个只读的镜像，docker 以这个镜像为蓝本，在镜像的基础上运行一个容器，容器可读可写，不需要就可以删除，只要保留了镜像，可以随时随地批量跑多个一模一样的容器(系统)小</p><h3 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h3><ol><li>安装 Xshell<br> 从压缩包解压出文件夹，点击运行「绿化.bat」绿化后桌面会出现软件的图标,打开 Xshell<br> <img src="https://s3.ax1x.com/2020/11/27/DsAgC4.png" alt="安装xhell"></li><li>安装报错<br> 如果安装报错，说明你的系统缺少一些必备组件，点击安装文件夹中的常用运行库<br> <img src="https://s3.ax1x.com/2020/11/27/DsAWvR.png" alt="安装报错"><br> <img src="https://s3.ax1x.com/2020/11/27/DsEhWQ.png" alt="安装运行库"><br> 安装完运行库后重新打开 xshell，软件会询问你数据的保存位置，默认即可<br> <img src="https://s3.ax1x.com/2020/11/27/DsAbPe.png" alt="数据保存位置"></li><li>连接服务器<br> 点击「连接」，填入服务器 IP 地址，点击确定<br> <img src="https://s3.ax1x.com/2020/11/27/DsAq8H.png" alt="连接服务器"><br> 软件会询问是否保存密钥，选择「接受并保存」<br> <img src="https://s3.ax1x.com/2020/11/27/DsA75D.png" alt="保存密钥"><br> 然后依次输入服务器的用户名、密码，登陆到服务器<br> <img src="https://s3.ax1x.com/2020/11/27/DsATUO.png" alt="输入用户"><br> <img src="https://s3.ax1x.com/2020/11/27/DsAoVK.png" alt="输入密码"><br> 如图所示，登陆成功<br> <img src="https://s3.ax1x.com/2020/11/27/DsAL2d.png" alt="登陆成功"></li></ol><h3 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h3><ol><li><p>安装 Docker 环境</p><pre><code> curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</code></pre><p> <img src="https://s3.ax1x.com/2020/11/27/DsAOxA.png" alt="安装docker"></p></li><li><p>配置镜像加速</p><pre><code> sudo mkdir -p /etc/docker sudo tee /etc/docker/daemon.json &lt;&lt;-&#39;EOF&#39; &#123; &quot;registry-mirrors&quot;: [&quot;https://reg-mirror.qiniu.com&quot;] &#125; EOF sudo systemctl daemon-reload   # 重载配置 sudo systemctl restart docker  # 重启 docker sudo systemctl enable docker   # 将 docker 设为开机自启</code></pre><p> <img src="https://s3.ax1x.com/2020/11/27/DsAjKI.png" alt="配置镜像加速"></p></li></ol><h3 id="Code-Server"><a href="#Code-Server" class="headerlink" title="Code Server"></a>Code Server</h3><blockquote><p><a href="https://github.com/cdr/code-server">Code Server</a> 是一个在服务器上跑 vscode 的项目，搭建了 code-server 后，不论是手机还是电脑，只要通过浏览器即可享受 vscode 的众多插件加持，畅快写代码</p></blockquote><ol><li><p>拉取镜像</p><pre><code> Docker pull linuxserver/code-server</code></pre><p> <img src="https://s3.ax1x.com/2020/11/27/DsAvrt.png" alt="拉取镜像"></p></li><li><p>运行镜像</p><pre><code> docker run -d \     --name=code \  # 设置容器的名字     -e PASSWORD=password \  # 访问密码设置为 password，此参数不写代表无密码     -e SUDO_PASSWORD=password \  # sudo 权限的密码设置为 password     -p 8443:8443 \ # 把服务器的端口映射到容器的端口     linuxserver/code-server</code></pre><p> <img src="https://s3.ax1x.com/2020/11/27/DsESVf.png" alt="运行容器"></p></li><li><p>Enjoy<br> 浏览器访问「IP:8443」打开登陆网页，输入密码即可获得一个与本机完全无差别的 vscode<br> <img src="https://s3.ax1x.com/2020/11/27/DsEpa8.png" alt="登陆验证"><br> <img src="https://s3.ax1x.com/2020/11/27/DsE9IS.png" alt="写点js"><br> <img src="https://s3.ax1x.com/2020/11/27/DsEPPg.png" alt="写点py"></p></li></ol><h3 id="OPQBot"><a href="#OPQBot" class="headerlink" title="OPQBot"></a>OPQBot</h3><blockquote><p><a href="https://github.com/OPQBOT/OPQ">OPQBot</a> 是一个 QQ 机器人框架，具有众多的插件加持，可以实现各种各样有趣的功能，我将它和常用插件包 <a href="https://github.com/fz6m/opqqq-plugin">opqqq-plugin</a> 打包，只需要准备一个机器人用的 QQ 小号，把它拉到群里，运行容器就可以拥有属于自己的 QQ 机器人</p></blockquote><ol><li><p>拉取镜像</p><pre><code> docker pull kimjungwha/opqbot</code></pre><p> <img src="https://s3.ax1x.com/2020/11/27/DsEiGQ.png" alt="拉取镜像"></p></li><li><p>申请 Token<br> 打开 <a href="https://developer.gitter.im/docs/welcome">gitter.im</a>，点击右上角「Sign in」登陆，建议使用 Github 帐号登陆。登陆成功后即可看到 Token<br> <img src="https://s3.ax1x.com/2020/11/27/DsEF2j.png" alt="申请Token"><br> <img src="https://s3.ax1x.com/2020/11/27/DsEMiF.png" alt="申请Token"><br> <img src="https://s3.ax1x.com/2020/11/27/DsEkxs.png" alt="申请Token"></p></li><li><p>创建容器</p><pre><code> docker run -id --name opqbot -e Token=&quot;xxxxxxx&quot; -e QQ=&quot;xxxxxxx&quot; -p 8888:8888 kimjungwha/opqbot  # Token=&quot;&quot; 填入 Token，QQ=&quot;&quot; 填入 QQ 号</code></pre><p> <img src="https://s3.ax1x.com/2020/11/27/DsEEMn.png" alt="运行容器"></p></li><li><p>登陆 QQ 号<br> 浏览器访问「服务器IP:端口」进入控制台<br> <img src="https://s3.ax1x.com/2020/11/27/DsEVrq.png" alt="访问控制台1"></p><p> 访问「服务器IP:端口/v1/Login/GetQRcode」获取 QQ 登陆的二维码，手机 QQ 切小号扫码登陆<br> <img src="https://s3.ax1x.com/2020/11/27/DsEZq0.png" alt="扫码登陆"><br> <img src="https://s3.ax1x.com/2020/11/27/DsEmZV.png" alt="登陆成功"></p></li><li><p>Enjoy<br> 具体的插件使用方法可以看<a href="https://fz6m.github.io/opqqq-plugin-press/">opqqq-plugin 官网</a><br> <img src="https://s3.ax1x.com/2020/11/27/DsZkBq.png" alt="Enjoy1"><br> <img src="https://s3.ax1x.com/2020/11/27/DsEuIU.png" alt="Enjoy2"><br> <img src="https://s3.ax1x.com/2020/11/27/DsZFun.png" alt="Enjoy3"></p></li><li><p>添加插件<br> 为了防止体积过大，我只集成了五个插件，如果你还想拥有更多的功能，可以自行添加插件，如 <a href="https://github.com/yuban10703/OPQ-SetuBot">SEtu机器人</a>    </p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vps</tag>
      
      <tag>Docker</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>白嫖Bilibili挂机脚本</title>
    <link href="/2020/11/23/%E7%99%BD%E5%AB%96Bilibili%E6%8C%82%E6%9C%BA%E8%84%9A%E6%9C%AC/"/>
    <url>/2020/11/23/%E7%99%BD%E5%AB%96Bilibili%E6%8C%82%E6%9C%BA%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h2 id="BILIBILI-HELPER"><a href="#BILIBILI-HELPER" class="headerlink" title="BILIBILI-HELPER"></a>BILIBILI-HELPER</h2><blockquote><p>利用 GitHub Action 自动完成 Bilibili 每日任务，以白嫖的方式快速成为六级号</p></blockquote><a id="more"></a><h3 id="Github-fork-此项目"><a href="#Github-fork-此项目" class="headerlink" title="Github fork 此项目"></a>Github fork 此项目</h3><p>打开<a href="https://github.com/lycthp/BILIB">项目主页</a>，点击右上角的「Fork」，Github 会把这个仓库复制到你的账户下</p><p><img src="https://s3.ax1x.com/2020/11/23/DYh8uq.png" alt="fork项目"></p><h3 id="创建-Secrets"><a href="#创建-Secrets" class="headerlink" title="创建 Secrets"></a>创建 Secrets</h3><ol><li><p>浏览器打开并登录 bilibili，提取 Cookies</p><ul><li><p>按 F12 打开 「开发者工具」 找到「应用程序/Application」=&gt;「存储」=&gt;「Cookies」  </p></li><li><p>找到「<code>bili_jct</code>」、「<code>SESSDATA</code>」 「<code>DedeUserID</code>」三项，并复制对应的值<br>  <img src="https://s3.ax1x.com/2020/11/23/DYhOPg.png" alt="获取cookie"></p><p>  <img src="https://s3.ax1x.com/2020/11/23/DYh4xA.png" alt="获取cookie2">  </p></li></ul></li></ol><ol start="2"><li><p>创建对应的 GitHub Secrets  </p><ul><li><p>回到自己 fork 的项目，点击「Settings」=&gt; 「Secrets」 =&gt; 「New Secrets」添加以下 3 个 Secrets,填入对应的值</p><table><thead><tr><th align="center">变量</th><th align="center">值</th></tr></thead><tbody><tr><td align="center"><code>DEDEUSERID</code></td><td align="center">从 Cookie 中获取</td></tr><tr><td align="center"><code>SESSDATA</code></td><td align="center">从 Cookie 中获取</td></tr><tr><td align="center"><code>BILI_JCT</code></td><td align="center">从 Cookie 中获取</td></tr></tbody></table><p><img src="https://s3.ax1x.com/2020/11/23/DYhJbV.png" alt="填入cookie"></p></li></ul></li></ol><h3 id="手动执行"><a href="#手动执行" class="headerlink" title="手动执行"></a>手动执行</h3><ol><li><p>手动执行验证是否成功<br> 点击「Actions」，开启「workflows」<br> <img src="https://s3.ax1x.com/2020/11/23/DYhtET.png" alt="开启action"><br> 点击「run workflow」，手动运行脚本<br> <img src="https://s3.ax1x.com/2020/11/23/DYhU5F.png" alt="开启action2"></p></li><li><p>验证成功<br> <img src="https://s3.ax1x.com/2020/11/23/DYhw8J.png" alt="查看结果"><br> <img src="https://s3.ax1x.com/2020/11/23/DYh029.png" alt="查看结果"></p></li></ol><h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><ul><li>修改「./github/trigger.json」文件,将 <code>trigger</code> 的值改为 1，以开启 Actions 每日自动执行脚本<br>  <img src="https://s3.ax1x.com/2020/11/23/DYh1vn.png" alt="修改配置1"><br>  <img src="https://s3.ax1x.com/2020/11/23/DYhMCQ.png" alt="修改配置2"><br>  <img src="https://s3.ax1x.com/2020/11/23/DYhGD0.png" alt="修改配置3"></li></ul><h3 id="接入-Server-酱推送通知"><a href="#接入-Server-酱推送通知" class="headerlink" title="接入 Server 酱推送通知"></a>接入 Server 酱推送通知</h3><ol><li><p>打开 <a href="http://sc.ftqq.com/">Server酱</a> 点击「登入」  </p><p> <img src="https://s3.ax1x.com/2020/11/23/DYhlgs.png" alt="server1"></p></li><li><p>点击点发送消息，生成调用代码，点击微信推送，绑定微信账号  </p><p> <img src="https://s3.ax1x.com/2020/11/23/DYhQ3j.png" alt="server2"></p></li></ol><ol start="3"><li><p>在 Github Secrets 新建 <code>SERVERPUSHKEY</code> 变量，填入调用代码,至此，secrets 共有四个变量</p><p> <img src="https://s3.ax1x.com/2020/11/23/DYhNUU.png" alt="填入cookie2"></p></li><li><p>手机效果</p><p> <img src="https://s3.ax1x.com/2020/11/23/DYhgUO.jpg" alt="手机效果"></p></li></ol><h3 id="开启脚本自动更新"><a href="#开启脚本自动更新" class="headerlink" title="开启脚本自动更新"></a>开启脚本自动更新</h3><ol><li><p>在 <code>./github/workflows</code> 目录下创建 <code>auto_merge.yml</code> 文件，内容如下</p><p> <img src="https://s3.ax1x.com/2020/11/23/DYhBvR.png" alt="自动更新"></p></li></ol><pre><code>    name: auto_merge    on:    workflow_dispatch:    schedule:        - cron: 0 8 * * fri        # cron表达式,每周五16点执行一次，actions任务时区为UTC时区。     jobs:    merge:        runs-on: ubuntu-latest        steps:        - name: Checkout        uses: actions/checkout@v2        with:            ref: main            fetch-depth: 0            lfs: true        - name: Set git identity        run : |            git config --global user.email &quot;41898282+github-actions[bot]@users.noreply.github.com&quot;            git config --global user.name &quot;github-actions[bot]&quot;        - name: Load upstream commits        run: |            git update-index --assume-unchanged ./src/main/resources/config.json            git pull https://github.com/JunzhouLiu/BILIBILI-HELPER.git --log --no-commit        - name: Apply commit changes        run: |            if [ -f ./.git/MERGE_MSG ]; then            mkdir ./tmp &amp;&amp; cp ./.git/MERGE_MSG ./tmp/message            sed -i &quot;1c [bot] AutoMerging: merge all upstream&#39;s changes:&quot; ./tmp/message            sed -i &#39;/^\#.*/d&#39; ./tmp/message            git commit --file=&quot;./tmp/message&quot;            else            echo &quot;There is no merge commits.&quot;            fi        - name: Push Commits        env:            DOWNSTREAM_BRANCH: main            TZ: Asia/Shanghai        run: git push origin $DOWNSTREAM_BRANCH</code></pre><ol start="2"><li>点击提交即可<br><img src="https://s3.ax1x.com/2020/11/23/DYhcVK.png" alt="自动更新2"></li></ol>]]></content>
    
    
    <categories>
      
      <category>Script</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Script</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
